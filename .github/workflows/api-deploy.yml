name: Deploy Java API CI/CD on push to main
on:
  # When approved PR and merging, deploy to EC2
  push:
    branches: ["main"]
    paths:
      - "Backend/**"

jobs:
  build-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Generate application.properties
        run: |
          cd ./Backend
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "spring.config.use-legacy-processing=true" >> application.properties
          echo "spring.datasource.url=jdbc:sqlserver://<full-db-string>" >> application.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> application.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> application.properties
          echo "spring.jpa.show-sql=true" >> application.properties
          echo "spring.jpa.properties.hibernate.format_sql = true" >> application.properties
          echo "spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLServerDialect" >> application.properties
          echo "spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl" >> application.properties
          echo "spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl" >> application.properties
          echo "spring.jpa.properties.hibernate.default_schema=tdb" >> application.properties
          echo "github.client.id=${{ secrets.CLIENT_ID }}" >> application.properties
          echo "github.client.secret=${{ secrets.CLIENT_SECRET }}" >> application.properties
          echo "spring.security.oauth2.client.registration.github.client-id=${{ secrets.CLIENT_ID }}" >> application.properties
          echo "spring.security.oauth2.client.registration.github.client-secret=${{ secrets.CLIENT_SECRET }}" >> application.properties

      - name: Test & package
        run: |
          cd Backend
          mvn package -DskipTests

      - name: Upload image to S3
        run: aws s3 cp site.zip s3://${{ secrets.BUCKET_NAME }}/application-${{ github.run_id }}.zip
        working-directory: Backend/target/

  deploy-api:
    runs-on: ubuntu-latest
    needs: [ build-api ]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version --application-name api-app --version-label ${{ github.run_id }} --source-bundle S3Bucket="${{ secrets.BUCKET_NAME }}",S3Key="application-${{ github.run_id }}.zip"
          aws elasticbeanstalk update-environment --application-name api-app --environment-name api-env --version-label ${{ github.run_id }}
